/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Points } from "./Points";
import { PointsCountArgs } from "./PointsCountArgs";
import { PointsFindManyArgs } from "./PointsFindManyArgs";
import { PointsFindUniqueArgs } from "./PointsFindUniqueArgs";
import { CreatePointsArgs } from "./CreatePointsArgs";
import { UpdatePointsArgs } from "./UpdatePointsArgs";
import { DeletePointsArgs } from "./DeletePointsArgs";
import { Branch } from "../../branch/base/Branch";
import { User } from "../../user/base/User";
import { PointsService } from "../points.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Points)
export class PointsResolverBase {
  constructor(
    protected readonly service: PointsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Points",
    action: "read",
    possession: "any",
  })
  async _pointsItemsMeta(
    @graphql.Args() args: PointsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Points])
  @nestAccessControl.UseRoles({
    resource: "Points",
    action: "read",
    possession: "any",
  })
  async pointsItems(
    @graphql.Args() args: PointsFindManyArgs
  ): Promise<Points[]> {
    return this.service.pointsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Points, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Points",
    action: "read",
    possession: "own",
  })
  async points(
    @graphql.Args() args: PointsFindUniqueArgs
  ): Promise<Points | null> {
    const result = await this.service.points(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Points)
  @nestAccessControl.UseRoles({
    resource: "Points",
    action: "create",
    possession: "any",
  })
  async createPoints(@graphql.Args() args: CreatePointsArgs): Promise<Points> {
    return await this.service.createPoints({
      ...args,
      data: {
        ...args.data,

        branch: args.data.branch
          ? {
              connect: args.data.branch,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Points)
  @nestAccessControl.UseRoles({
    resource: "Points",
    action: "update",
    possession: "any",
  })
  async updatePoints(
    @graphql.Args() args: UpdatePointsArgs
  ): Promise<Points | null> {
    try {
      return await this.service.updatePoints({
        ...args,
        data: {
          ...args.data,

          branch: args.data.branch
            ? {
                connect: args.data.branch,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Points)
  @nestAccessControl.UseRoles({
    resource: "Points",
    action: "delete",
    possession: "any",
  })
  async deletePoints(
    @graphql.Args() args: DeletePointsArgs
  ): Promise<Points | null> {
    try {
      return await this.service.deletePoints(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Branch, {
    nullable: true,
    name: "branch",
  })
  @nestAccessControl.UseRoles({
    resource: "Branch",
    action: "read",
    possession: "any",
  })
  async getBranch(@graphql.Parent() parent: Points): Promise<Branch | null> {
    const result = await this.service.getBranch(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Points): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
