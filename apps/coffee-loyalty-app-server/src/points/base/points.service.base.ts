/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Points as PrismaPoints,
  Branch as PrismaBranch,
  User as PrismaUser,
} from "@prisma/client";

export class PointsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PointsCountArgs, "select">): Promise<number> {
    return this.prisma.points.count(args);
  }

  async pointsItems(args: Prisma.PointsFindManyArgs): Promise<PrismaPoints[]> {
    return this.prisma.points.findMany(args);
  }
  async points(
    args: Prisma.PointsFindUniqueArgs
  ): Promise<PrismaPoints | null> {
    return this.prisma.points.findUnique(args);
  }
  async createPoints(args: Prisma.PointsCreateArgs): Promise<PrismaPoints> {
    return this.prisma.points.create(args);
  }
  async updatePoints(args: Prisma.PointsUpdateArgs): Promise<PrismaPoints> {
    return this.prisma.points.update(args);
  }
  async deletePoints(args: Prisma.PointsDeleteArgs): Promise<PrismaPoints> {
    return this.prisma.points.delete(args);
  }

  async getBranch(parentId: string): Promise<PrismaBranch | null> {
    return this.prisma.points
      .findUnique({
        where: { id: parentId },
      })
      .branch();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.points
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
